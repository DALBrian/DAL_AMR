// Generated by gencpp from file pf_driver/PFR2300Header.msg
// DO NOT EDIT!


#ifndef PF_DRIVER_MESSAGE_PFR2300HEADER_H
#define PF_DRIVER_MESSAGE_PFR2300HEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pf_driver/PFHeader.h>

namespace pf_driver
{
template <class ContainerAllocator>
struct PFR2300Header_
{
  typedef PFR2300Header_<ContainerAllocator> Type;

  PFR2300Header_()
    : header()
    , layer_index(0)
    , layer_inclination(0)
    , timestamp_raw(0)
    , reserved1(0)
    , status_flags(0)
    , scan_frequency(0)
    , num_points_scan(0)
    , num_points_packet(0)
    , first_index(0)
    , first_angle(0)
    , angular_increment(0)
    , reserved2(0)
    , reserved3(0)
    , reserved4(0)
    , reserved5(0)  {
    }
  PFR2300Header_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , layer_index(0)
    , layer_inclination(0)
    , timestamp_raw(0)
    , reserved1(0)
    , status_flags(0)
    , scan_frequency(0)
    , num_points_scan(0)
    , num_points_packet(0)
    , first_index(0)
    , first_angle(0)
    , angular_increment(0)
    , reserved2(0)
    , reserved3(0)
    , reserved4(0)
    , reserved5(0)  {
  (void)_alloc;
    }



   typedef  ::pf_driver::PFHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _layer_index_type;
  _layer_index_type layer_index;

   typedef int32_t _layer_inclination_type;
  _layer_inclination_type layer_inclination;

   typedef uint64_t _timestamp_raw_type;
  _timestamp_raw_type timestamp_raw;

   typedef uint64_t _reserved1_type;
  _reserved1_type reserved1;

   typedef uint32_t _status_flags_type;
  _status_flags_type status_flags;

   typedef uint32_t _scan_frequency_type;
  _scan_frequency_type scan_frequency;

   typedef uint16_t _num_points_scan_type;
  _num_points_scan_type num_points_scan;

   typedef uint16_t _num_points_packet_type;
  _num_points_packet_type num_points_packet;

   typedef uint16_t _first_index_type;
  _first_index_type first_index;

   typedef int32_t _first_angle_type;
  _first_angle_type first_angle;

   typedef int32_t _angular_increment_type;
  _angular_increment_type angular_increment;

   typedef uint32_t _reserved2_type;
  _reserved2_type reserved2;

   typedef uint32_t _reserved3_type;
  _reserved3_type reserved3;

   typedef uint64_t _reserved4_type;
  _reserved4_type reserved4;

   typedef uint64_t _reserved5_type;
  _reserved5_type reserved5;





  typedef boost::shared_ptr< ::pf_driver::PFR2300Header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pf_driver::PFR2300Header_<ContainerAllocator> const> ConstPtr;

}; // struct PFR2300Header_

typedef ::pf_driver::PFR2300Header_<std::allocator<void> > PFR2300Header;

typedef boost::shared_ptr< ::pf_driver::PFR2300Header > PFR2300HeaderPtr;
typedef boost::shared_ptr< ::pf_driver::PFR2300Header const> PFR2300HeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pf_driver::PFR2300Header_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pf_driver::PFR2300Header_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pf_driver::PFR2300Header_<ContainerAllocator1> & lhs, const ::pf_driver::PFR2300Header_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.layer_index == rhs.layer_index &&
    lhs.layer_inclination == rhs.layer_inclination &&
    lhs.timestamp_raw == rhs.timestamp_raw &&
    lhs.reserved1 == rhs.reserved1 &&
    lhs.status_flags == rhs.status_flags &&
    lhs.scan_frequency == rhs.scan_frequency &&
    lhs.num_points_scan == rhs.num_points_scan &&
    lhs.num_points_packet == rhs.num_points_packet &&
    lhs.first_index == rhs.first_index &&
    lhs.first_angle == rhs.first_angle &&
    lhs.angular_increment == rhs.angular_increment &&
    lhs.reserved2 == rhs.reserved2 &&
    lhs.reserved3 == rhs.reserved3 &&
    lhs.reserved4 == rhs.reserved4 &&
    lhs.reserved5 == rhs.reserved5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pf_driver::PFR2300Header_<ContainerAllocator1> & lhs, const ::pf_driver::PFR2300Header_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pf_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pf_driver::PFR2300Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pf_driver::PFR2300Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pf_driver::PFR2300Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pf_driver::PFR2300Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pf_driver::PFR2300Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pf_driver::PFR2300Header_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pf_driver::PFR2300Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "109593408f4e056fea70033a5665f604";
  }

  static const char* value(const ::pf_driver::PFR2300Header_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x109593408f4e056fULL;
  static const uint64_t static_value2 = 0xea70033a5665f604ULL;
};

template<class ContainerAllocator>
struct DataType< ::pf_driver::PFR2300Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pf_driver/PFR2300Header";
  }

  static const char* value(const ::pf_driver::PFR2300Header_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pf_driver::PFR2300Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pf_driver/PFHeader header\n"
"\n"
"uint16 layer_index        # vertical layer index (0..3)\n"
"int32 layer_inclination   # vertical layer inclination [1/10000 degree]\n"
"uint64 timestamp_raw      # raw timestamp of first scan point in this packet in NTP time format\n"
"uint64 reserved1          # reserved - all bits zero for devices without switching I/Q\n"
"uint32 status_flags       # scan status flags (TODO: should this be a struct? or provide masking to extract\n"
"                                  # specific flags)\n"
"uint32 scan_frequency     # frequency of head rotation  (1/1000Hz)\n"
"uint16 num_points_scan    # number of scan points (samples) within complete scan\n"
"uint16 num_points_packet  # total number of scan points within this packet\n"
"uint16 first_index        # index of first scan point within this packet\n"
"int32 first_angle         # absolute angle of first scan point within this packet  (1/10000°)\n"
"int32 angular_increment   # delta between two succeding scan points (1/10000°) CCW rotation: +ve, CW\n"
"                                  # rotation: -ve\n"
"uint32 reserved2          # reserved - all bits zero for devices without switching I/Q\n"
"uint32 reserved3          # reserved - all bits zero for devices without switching I/Q\n"
"uint64 reserved4          # reserved - all bits zero for devices without switching I/Q\n"
"uint64 reserved5          # reserved - all bits zero for devices without switching I/Q\n"
"================================================================================\n"
"MSG: pf_driver/PFHeader\n"
"uint16 magic           # magic byte (0xa25c) marking the beginning of a packet\n"
"uint16 packet_type     # scan data packet type (0x0041 - 'A' 0x0042 - 'B' 0x0043 - 'C')\n"
"uint32 packet_size     # overall packet size in bytes (header + payload)\n"
"uint16 header_size     # header size in bytes (offset to payload data)\n"
"uint16 scan_number     # sequence number for scan (incremented for every scan, starting with 0, overflows)\n"
"uint16 packet_number   # sequence number for packet (counting packets of a particular scan, starting with 1)\n"
;
  }

  static const char* value(const ::pf_driver::PFR2300Header_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pf_driver::PFR2300Header_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.layer_index);
      stream.next(m.layer_inclination);
      stream.next(m.timestamp_raw);
      stream.next(m.reserved1);
      stream.next(m.status_flags);
      stream.next(m.scan_frequency);
      stream.next(m.num_points_scan);
      stream.next(m.num_points_packet);
      stream.next(m.first_index);
      stream.next(m.first_angle);
      stream.next(m.angular_increment);
      stream.next(m.reserved2);
      stream.next(m.reserved3);
      stream.next(m.reserved4);
      stream.next(m.reserved5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PFR2300Header_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pf_driver::PFR2300Header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pf_driver::PFR2300Header_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::pf_driver::PFHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "layer_index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.layer_index);
    s << indent << "layer_inclination: ";
    Printer<int32_t>::stream(s, indent + "  ", v.layer_inclination);
    s << indent << "timestamp_raw: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp_raw);
    s << indent << "reserved1: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.reserved1);
    s << indent << "status_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.status_flags);
    s << indent << "scan_frequency: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.scan_frequency);
    s << indent << "num_points_scan: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.num_points_scan);
    s << indent << "num_points_packet: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.num_points_packet);
    s << indent << "first_index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.first_index);
    s << indent << "first_angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.first_angle);
    s << indent << "angular_increment: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angular_increment);
    s << indent << "reserved2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserved2);
    s << indent << "reserved3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserved3);
    s << indent << "reserved4: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.reserved4);
    s << indent << "reserved5: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.reserved5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PF_DRIVER_MESSAGE_PFR2300HEADER_H
