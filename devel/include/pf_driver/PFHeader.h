// Generated by gencpp from file pf_driver/PFHeader.msg
// DO NOT EDIT!


#ifndef PF_DRIVER_MESSAGE_PFHEADER_H
#define PF_DRIVER_MESSAGE_PFHEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pf_driver
{
template <class ContainerAllocator>
struct PFHeader_
{
  typedef PFHeader_<ContainerAllocator> Type;

  PFHeader_()
    : magic(0)
    , packet_type(0)
    , packet_size(0)
    , header_size(0)
    , scan_number(0)
    , packet_number(0)  {
    }
  PFHeader_(const ContainerAllocator& _alloc)
    : magic(0)
    , packet_type(0)
    , packet_size(0)
    , header_size(0)
    , scan_number(0)
    , packet_number(0)  {
  (void)_alloc;
    }



   typedef uint16_t _magic_type;
  _magic_type magic;

   typedef uint16_t _packet_type_type;
  _packet_type_type packet_type;

   typedef uint32_t _packet_size_type;
  _packet_size_type packet_size;

   typedef uint16_t _header_size_type;
  _header_size_type header_size;

   typedef uint16_t _scan_number_type;
  _scan_number_type scan_number;

   typedef uint16_t _packet_number_type;
  _packet_number_type packet_number;





  typedef boost::shared_ptr< ::pf_driver::PFHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pf_driver::PFHeader_<ContainerAllocator> const> ConstPtr;

}; // struct PFHeader_

typedef ::pf_driver::PFHeader_<std::allocator<void> > PFHeader;

typedef boost::shared_ptr< ::pf_driver::PFHeader > PFHeaderPtr;
typedef boost::shared_ptr< ::pf_driver::PFHeader const> PFHeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pf_driver::PFHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pf_driver::PFHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pf_driver::PFHeader_<ContainerAllocator1> & lhs, const ::pf_driver::PFHeader_<ContainerAllocator2> & rhs)
{
  return lhs.magic == rhs.magic &&
    lhs.packet_type == rhs.packet_type &&
    lhs.packet_size == rhs.packet_size &&
    lhs.header_size == rhs.header_size &&
    lhs.scan_number == rhs.scan_number &&
    lhs.packet_number == rhs.packet_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pf_driver::PFHeader_<ContainerAllocator1> & lhs, const ::pf_driver::PFHeader_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pf_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pf_driver::PFHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pf_driver::PFHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pf_driver::PFHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pf_driver::PFHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pf_driver::PFHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pf_driver::PFHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pf_driver::PFHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82667d3dec8bc6d32a2294563efd904d";
  }

  static const char* value(const ::pf_driver::PFHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82667d3dec8bc6d3ULL;
  static const uint64_t static_value2 = 0x2a2294563efd904dULL;
};

template<class ContainerAllocator>
struct DataType< ::pf_driver::PFHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pf_driver/PFHeader";
  }

  static const char* value(const ::pf_driver::PFHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pf_driver::PFHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 magic           # magic byte (0xa25c) marking the beginning of a packet\n"
"uint16 packet_type     # scan data packet type (0x0041 - 'A' 0x0042 - 'B' 0x0043 - 'C')\n"
"uint32 packet_size     # overall packet size in bytes (header + payload)\n"
"uint16 header_size     # header size in bytes (offset to payload data)\n"
"uint16 scan_number     # sequence number for scan (incremented for every scan, starting with 0, overflows)\n"
"uint16 packet_number   # sequence number for packet (counting packets of a particular scan, starting with 1)\n"
;
  }

  static const char* value(const ::pf_driver::PFHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pf_driver::PFHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.magic);
      stream.next(m.packet_type);
      stream.next(m.packet_size);
      stream.next(m.header_size);
      stream.next(m.scan_number);
      stream.next(m.packet_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PFHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pf_driver::PFHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pf_driver::PFHeader_<ContainerAllocator>& v)
  {
    s << indent << "magic: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.magic);
    s << indent << "packet_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.packet_type);
    s << indent << "packet_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.packet_size);
    s << indent << "header_size: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.header_size);
    s << indent << "scan_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.scan_number);
    s << indent << "packet_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.packet_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PF_DRIVER_MESSAGE_PFHEADER_H
