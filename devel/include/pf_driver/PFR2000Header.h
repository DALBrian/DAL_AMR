// Generated by gencpp from file pf_driver/PFR2000Header.msg
// DO NOT EDIT!


#ifndef PF_DRIVER_MESSAGE_PFR2000HEADER_H
#define PF_DRIVER_MESSAGE_PFR2000HEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pf_driver/PFHeader.h>

namespace pf_driver
{
template <class ContainerAllocator>
struct PFR2000Header_
{
  typedef PFR2000Header_<ContainerAllocator> Type;

  PFR2000Header_()
    : header()
    , timestamp_raw(0)
    , timestamp_sync(0)
    , status_flags(0)
    , scan_frequency(0)
    , num_points_scan(0)
    , num_points_packet(0)
    , first_index(0)
    , first_angle(0)
    , angular_increment(0)
    , iq_input(0)
    , iq_overload(0)
    , iq_timestamp_raw(0)
    , iq_timestamp_sync(0)  {
    }
  PFR2000Header_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , timestamp_raw(0)
    , timestamp_sync(0)
    , status_flags(0)
    , scan_frequency(0)
    , num_points_scan(0)
    , num_points_packet(0)
    , first_index(0)
    , first_angle(0)
    , angular_increment(0)
    , iq_input(0)
    , iq_overload(0)
    , iq_timestamp_raw(0)
    , iq_timestamp_sync(0)  {
  (void)_alloc;
    }



   typedef  ::pf_driver::PFHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _timestamp_raw_type;
  _timestamp_raw_type timestamp_raw;

   typedef uint64_t _timestamp_sync_type;
  _timestamp_sync_type timestamp_sync;

   typedef uint32_t _status_flags_type;
  _status_flags_type status_flags;

   typedef uint32_t _scan_frequency_type;
  _scan_frequency_type scan_frequency;

   typedef uint16_t _num_points_scan_type;
  _num_points_scan_type num_points_scan;

   typedef uint16_t _num_points_packet_type;
  _num_points_packet_type num_points_packet;

   typedef uint16_t _first_index_type;
  _first_index_type first_index;

   typedef int32_t _first_angle_type;
  _first_angle_type first_angle;

   typedef int32_t _angular_increment_type;
  _angular_increment_type angular_increment;

   typedef uint32_t _iq_input_type;
  _iq_input_type iq_input;

   typedef uint32_t _iq_overload_type;
  _iq_overload_type iq_overload;

   typedef uint64_t _iq_timestamp_raw_type;
  _iq_timestamp_raw_type iq_timestamp_raw;

   typedef uint64_t _iq_timestamp_sync_type;
  _iq_timestamp_sync_type iq_timestamp_sync;





  typedef boost::shared_ptr< ::pf_driver::PFR2000Header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pf_driver::PFR2000Header_<ContainerAllocator> const> ConstPtr;

}; // struct PFR2000Header_

typedef ::pf_driver::PFR2000Header_<std::allocator<void> > PFR2000Header;

typedef boost::shared_ptr< ::pf_driver::PFR2000Header > PFR2000HeaderPtr;
typedef boost::shared_ptr< ::pf_driver::PFR2000Header const> PFR2000HeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pf_driver::PFR2000Header_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pf_driver::PFR2000Header_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pf_driver::PFR2000Header_<ContainerAllocator1> & lhs, const ::pf_driver::PFR2000Header_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.timestamp_raw == rhs.timestamp_raw &&
    lhs.timestamp_sync == rhs.timestamp_sync &&
    lhs.status_flags == rhs.status_flags &&
    lhs.scan_frequency == rhs.scan_frequency &&
    lhs.num_points_scan == rhs.num_points_scan &&
    lhs.num_points_packet == rhs.num_points_packet &&
    lhs.first_index == rhs.first_index &&
    lhs.first_angle == rhs.first_angle &&
    lhs.angular_increment == rhs.angular_increment &&
    lhs.iq_input == rhs.iq_input &&
    lhs.iq_overload == rhs.iq_overload &&
    lhs.iq_timestamp_raw == rhs.iq_timestamp_raw &&
    lhs.iq_timestamp_sync == rhs.iq_timestamp_sync;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pf_driver::PFR2000Header_<ContainerAllocator1> & lhs, const ::pf_driver::PFR2000Header_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pf_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pf_driver::PFR2000Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pf_driver::PFR2000Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pf_driver::PFR2000Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pf_driver::PFR2000Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pf_driver::PFR2000Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pf_driver::PFR2000Header_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pf_driver::PFR2000Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "872de66eddb19a4a5a02a265250132af";
  }

  static const char* value(const ::pf_driver::PFR2000Header_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x872de66eddb19a4aULL;
  static const uint64_t static_value2 = 0x5a02a265250132afULL;
};

template<class ContainerAllocator>
struct DataType< ::pf_driver::PFR2000Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pf_driver/PFR2000Header";
  }

  static const char* value(const ::pf_driver::PFR2000Header_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pf_driver::PFR2000Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pf_driver/PFHeader header\n"
"\n"
"uint64 timestamp_raw      # raw timestamp of first scan point in this packet in NTP time format\n"
"uint64 timestamp_sync     # synchronized timestamp of first scan point in this packet in NTP time format\n"
"                                    #(currenty not available and and set to zero)\n"
"uint32 status_flags       # scan status flags (TODO: should this be a struct? or provide masking to extract\n"
"                                    # specific flags)\n"
"uint32 scan_frequency     # frequency of head rotation  (1/1000Hz)\n"
"uint16 num_points_scan    # number of scan points (samples) within complete scan\n"
"uint16 num_points_packet  # total number of scan points within this packet\n"
"uint16 first_index        # index of first scan point within this packet\n"
"int32 first_angle         # absolute angle of first scan point within this packet  (1/10000°)\n"
"int32 angular_increment   # delta between two succeding scan points (1/10000°) CCW rotation: +ve, CW\n"
"                                    # rotation: -ve\n"
"uint32 iq_input           # reserved - all bits zero for devices without switching I/Q\n"
"uint32 iq_overload        # reserved - all bits zero for devices without switching I/Q\n"
"uint64 iq_timestamp_raw   # raw timestamp for status of switching I/Q\n"
"uint64 iq_timestamp_sync  # synchronized timestamp for status of switching I/Q\n"
"#uint8[] padding           # 0-3 bytes padding to align header size to 32bit boundary (TODO: should I use\n"
"================================================================================\n"
"MSG: pf_driver/PFHeader\n"
"uint16 magic           # magic byte (0xa25c) marking the beginning of a packet\n"
"uint16 packet_type     # scan data packet type (0x0041 - 'A' 0x0042 - 'B' 0x0043 - 'C')\n"
"uint32 packet_size     # overall packet size in bytes (header + payload)\n"
"uint16 header_size     # header size in bytes (offset to payload data)\n"
"uint16 scan_number     # sequence number for scan (incremented for every scan, starting with 0, overflows)\n"
"uint16 packet_number   # sequence number for packet (counting packets of a particular scan, starting with 1)\n"
;
  }

  static const char* value(const ::pf_driver::PFR2000Header_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pf_driver::PFR2000Header_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.timestamp_raw);
      stream.next(m.timestamp_sync);
      stream.next(m.status_flags);
      stream.next(m.scan_frequency);
      stream.next(m.num_points_scan);
      stream.next(m.num_points_packet);
      stream.next(m.first_index);
      stream.next(m.first_angle);
      stream.next(m.angular_increment);
      stream.next(m.iq_input);
      stream.next(m.iq_overload);
      stream.next(m.iq_timestamp_raw);
      stream.next(m.iq_timestamp_sync);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PFR2000Header_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pf_driver::PFR2000Header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pf_driver::PFR2000Header_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::pf_driver::PFHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timestamp_raw: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp_raw);
    s << indent << "timestamp_sync: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp_sync);
    s << indent << "status_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.status_flags);
    s << indent << "scan_frequency: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.scan_frequency);
    s << indent << "num_points_scan: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.num_points_scan);
    s << indent << "num_points_packet: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.num_points_packet);
    s << indent << "first_index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.first_index);
    s << indent << "first_angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.first_angle);
    s << indent << "angular_increment: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angular_increment);
    s << indent << "iq_input: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.iq_input);
    s << indent << "iq_overload: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.iq_overload);
    s << indent << "iq_timestamp_raw: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.iq_timestamp_raw);
    s << indent << "iq_timestamp_sync: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.iq_timestamp_sync);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PF_DRIVER_MESSAGE_PFR2000HEADER_H
