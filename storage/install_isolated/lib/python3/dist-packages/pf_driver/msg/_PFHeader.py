# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pf_driver/PFHeader.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PFHeader(genpy.Message):
  _md5sum = "82667d3dec8bc6d32a2294563efd904d"
  _type = "pf_driver/PFHeader"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 magic           # magic byte (0xa25c) marking the beginning of a packet
uint16 packet_type     # scan data packet type (0x0041 - 'A' 0x0042 - 'B' 0x0043 - 'C')
uint32 packet_size     # overall packet size in bytes (header + payload)
uint16 header_size     # header size in bytes (offset to payload data)
uint16 scan_number     # sequence number for scan (incremented for every scan, starting with 0, overflows)
uint16 packet_number   # sequence number for packet (counting packets of a particular scan, starting with 1)"""
  __slots__ = ['magic','packet_type','packet_size','header_size','scan_number','packet_number']
  _slot_types = ['uint16','uint16','uint32','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       magic,packet_type,packet_size,header_size,scan_number,packet_number

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PFHeader, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.magic is None:
        self.magic = 0
      if self.packet_type is None:
        self.packet_type = 0
      if self.packet_size is None:
        self.packet_size = 0
      if self.header_size is None:
        self.header_size = 0
      if self.scan_number is None:
        self.scan_number = 0
      if self.packet_number is None:
        self.packet_number = 0
    else:
      self.magic = 0
      self.packet_type = 0
      self.packet_size = 0
      self.header_size = 0
      self.scan_number = 0
      self.packet_number = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2HI3H().pack(_x.magic, _x.packet_type, _x.packet_size, _x.header_size, _x.scan_number, _x.packet_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.magic, _x.packet_type, _x.packet_size, _x.header_size, _x.scan_number, _x.packet_number,) = _get_struct_2HI3H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2HI3H().pack(_x.magic, _x.packet_type, _x.packet_size, _x.header_size, _x.scan_number, _x.packet_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.magic, _x.packet_type, _x.packet_size, _x.header_size, _x.scan_number, _x.packet_number,) = _get_struct_2HI3H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2HI3H = None
def _get_struct_2HI3H():
    global _struct_2HI3H
    if _struct_2HI3H is None:
        _struct_2HI3H = struct.Struct("<2HI3H")
    return _struct_2HI3H
