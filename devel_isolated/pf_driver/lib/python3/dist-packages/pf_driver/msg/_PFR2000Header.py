# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pf_driver/PFR2000Header.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pf_driver.msg

class PFR2000Header(genpy.Message):
  _md5sum = "872de66eddb19a4a5a02a265250132af"
  _type = "pf_driver/PFR2000Header"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """pf_driver/PFHeader header

uint64 timestamp_raw      # raw timestamp of first scan point in this packet in NTP time format
uint64 timestamp_sync     # synchronized timestamp of first scan point in this packet in NTP time format
                                    #(currenty not available and and set to zero)
uint32 status_flags       # scan status flags (TODO: should this be a struct? or provide masking to extract
                                    # specific flags)
uint32 scan_frequency     # frequency of head rotation  (1/1000Hz)
uint16 num_points_scan    # number of scan points (samples) within complete scan
uint16 num_points_packet  # total number of scan points within this packet
uint16 first_index        # index of first scan point within this packet
int32 first_angle         # absolute angle of first scan point within this packet  (1/10000°)
int32 angular_increment   # delta between two succeding scan points (1/10000°) CCW rotation: +ve, CW
                                    # rotation: -ve
uint32 iq_input           # reserved - all bits zero for devices without switching I/Q
uint32 iq_overload        # reserved - all bits zero for devices without switching I/Q
uint64 iq_timestamp_raw   # raw timestamp for status of switching I/Q
uint64 iq_timestamp_sync  # synchronized timestamp for status of switching I/Q
#uint8[] padding           # 0-3 bytes padding to align header size to 32bit boundary (TODO: should I use
================================================================================
MSG: pf_driver/PFHeader
uint16 magic           # magic byte (0xa25c) marking the beginning of a packet
uint16 packet_type     # scan data packet type (0x0041 - 'A' 0x0042 - 'B' 0x0043 - 'C')
uint32 packet_size     # overall packet size in bytes (header + payload)
uint16 header_size     # header size in bytes (offset to payload data)
uint16 scan_number     # sequence number for scan (incremented for every scan, starting with 0, overflows)
uint16 packet_number   # sequence number for packet (counting packets of a particular scan, starting with 1)"""
  __slots__ = ['header','timestamp_raw','timestamp_sync','status_flags','scan_frequency','num_points_scan','num_points_packet','first_index','first_angle','angular_increment','iq_input','iq_overload','iq_timestamp_raw','iq_timestamp_sync']
  _slot_types = ['pf_driver/PFHeader','uint64','uint64','uint32','uint32','uint16','uint16','uint16','int32','int32','uint32','uint32','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,timestamp_raw,timestamp_sync,status_flags,scan_frequency,num_points_scan,num_points_packet,first_index,first_angle,angular_increment,iq_input,iq_overload,iq_timestamp_raw,iq_timestamp_sync

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PFR2000Header, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = pf_driver.msg.PFHeader()
      if self.timestamp_raw is None:
        self.timestamp_raw = 0
      if self.timestamp_sync is None:
        self.timestamp_sync = 0
      if self.status_flags is None:
        self.status_flags = 0
      if self.scan_frequency is None:
        self.scan_frequency = 0
      if self.num_points_scan is None:
        self.num_points_scan = 0
      if self.num_points_packet is None:
        self.num_points_packet = 0
      if self.first_index is None:
        self.first_index = 0
      if self.first_angle is None:
        self.first_angle = 0
      if self.angular_increment is None:
        self.angular_increment = 0
      if self.iq_input is None:
        self.iq_input = 0
      if self.iq_overload is None:
        self.iq_overload = 0
      if self.iq_timestamp_raw is None:
        self.iq_timestamp_raw = 0
      if self.iq_timestamp_sync is None:
        self.iq_timestamp_sync = 0
    else:
      self.header = pf_driver.msg.PFHeader()
      self.timestamp_raw = 0
      self.timestamp_sync = 0
      self.status_flags = 0
      self.scan_frequency = 0
      self.num_points_scan = 0
      self.num_points_packet = 0
      self.first_index = 0
      self.first_angle = 0
      self.angular_increment = 0
      self.iq_input = 0
      self.iq_overload = 0
      self.iq_timestamp_raw = 0
      self.iq_timestamp_sync = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2HI3H2Q2I3H2i2I2Q().pack(_x.header.magic, _x.header.packet_type, _x.header.packet_size, _x.header.header_size, _x.header.scan_number, _x.header.packet_number, _x.timestamp_raw, _x.timestamp_sync, _x.status_flags, _x.scan_frequency, _x.num_points_scan, _x.num_points_packet, _x.first_index, _x.first_angle, _x.angular_increment, _x.iq_input, _x.iq_overload, _x.iq_timestamp_raw, _x.iq_timestamp_sync))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = pf_driver.msg.PFHeader()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.header.magic, _x.header.packet_type, _x.header.packet_size, _x.header.header_size, _x.header.scan_number, _x.header.packet_number, _x.timestamp_raw, _x.timestamp_sync, _x.status_flags, _x.scan_frequency, _x.num_points_scan, _x.num_points_packet, _x.first_index, _x.first_angle, _x.angular_increment, _x.iq_input, _x.iq_overload, _x.iq_timestamp_raw, _x.iq_timestamp_sync,) = _get_struct_2HI3H2Q2I3H2i2I2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2HI3H2Q2I3H2i2I2Q().pack(_x.header.magic, _x.header.packet_type, _x.header.packet_size, _x.header.header_size, _x.header.scan_number, _x.header.packet_number, _x.timestamp_raw, _x.timestamp_sync, _x.status_flags, _x.scan_frequency, _x.num_points_scan, _x.num_points_packet, _x.first_index, _x.first_angle, _x.angular_increment, _x.iq_input, _x.iq_overload, _x.iq_timestamp_raw, _x.iq_timestamp_sync))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = pf_driver.msg.PFHeader()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.header.magic, _x.header.packet_type, _x.header.packet_size, _x.header.header_size, _x.header.scan_number, _x.header.packet_number, _x.timestamp_raw, _x.timestamp_sync, _x.status_flags, _x.scan_frequency, _x.num_points_scan, _x.num_points_packet, _x.first_index, _x.first_angle, _x.angular_increment, _x.iq_input, _x.iq_overload, _x.iq_timestamp_raw, _x.iq_timestamp_sync,) = _get_struct_2HI3H2Q2I3H2i2I2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2HI3H2Q2I3H2i2I2Q = None
def _get_struct_2HI3H2Q2I3H2i2I2Q():
    global _struct_2HI3H2Q2I3H2i2I2Q
    if _struct_2HI3H2Q2I3H2i2I2Q is None:
        _struct_2HI3H2Q2I3H2i2I2Q = struct.Struct("<2HI3H2Q2I3H2i2I2Q")
    return _struct_2HI3H2Q2I3H2i2I2Q
